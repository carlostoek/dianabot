from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, and_
from database.models import User, NarrativeState, StoryScene
from config.database import get_db
from typing import Dict, List, Optional
import json

class NarrativeService:
    
    # Narrative content based on the provided script
    NARRATIVE_CONTENT = {
        1: {  # Nivel 1 - Los Kinkys
            1: {  # Escena 1 - Bienvenida de Diana
                "character": "diana",
                "content": """üå∏ **Diana:**
*[Voz susurrante, como quien comparte un secreto]*

Bienvenido a Los Kinkys.  
Has cruzado una l√≠nea que muchos ven... pero pocos realmente atraviesan.

Puedo sentir tu curiosidad desde aqu√≠. Es... intrigante.  
No todos llegan con esa misma hambre en los ojos.

Este lugar responde a quienes saben que algunas puertas solo se abren desde adentro.  
Y yo... bueno, yo solo me revelo ante quienes comprenden que lo m√°s valioso nunca se entrega f√°cilmente.

*[Pausa, como si estuviera evaluando al usuario]*

Algo me dice que t√∫ podr√≠as ser diferente.  
Pero eso... eso est√° por verse.""",
                "buttons": [{"text": "üö™ Descubrir m√°s", "callback": "narrative_1_2"}],
                "rewards": {"besitos": 25, "xp": 50}
            },
            2: {  # Escena 2 - Lucien y el Primer Desaf√≠o
                "character": "lucien",
                "content": """üé© **Lucien:**
Ah, otro visitante de Diana.  
Perm√≠teme presentarme: Lucien, guardi√°n de los secretos que ella no cuenta... todav√≠a.

Veo que Diana ya plant√≥ esa semilla de curiosidad en ti. Lo noto en c√≥mo llegaste hasta aqu√≠.  
Pero la curiosidad sin acci√≥n es solo... voyeurismo pasivo.

Diana observa. Siempre observa.  
Y lo que m√°s le fascina no es la obediencia ciega, sino la intenci√≥n detr√°s de cada gesto.

**Misi√≥n:** Reacciona al √∫ltimo mensaje del canal. Pero hazlo porque realmente quieres entender, no porque se te ordena.""",
                "buttons": [{"text": "‚úÖ Entendido", "callback": "narrative_1_mission_1"}],
                "mission": {
                    "type": "channel_reaction",
                    "description": "Reaccionar al √∫ltimo mensaje del canal",
                    "reward_besitos": 50,
                    "reward_xp": 75
                }
            }
        },
        2: {  # Nivel 2 - Los Kinkys Profundizaci√≥n
            1: {
                "character": "diana",
                "content": """üå∏ **Diana:**
*[Con una sonrisa conocedora]*

Volviste. Interesante...  
No todos regresan despu√©s de la primera revelaci√≥n. Algunos se quedan satisfechos con las migajas de misterio.

*[Pausa evaluativa]*

Pero t√∫... t√∫ quieres m√°s. Puedo sentir esa hambre desde aqu√≠.  
Hay algo delicioso en esa persistencia tuya.""",
                "buttons": [{"text": "üîç Explorar m√°s profundo", "callback": "narrative_2_2"}],
                "rewards": {"besitos": 30, "xp": 60}
            }
        },
        4: {  # Nivel 4 - El Div√°n
            1: {
                "character": "diana",
                "content": """üå∏ **Diana:**
*[Con una sonrisa genuina, pero manteniendo la distancia]*

Oh... finalmente decidiste cruzar completamente.  
Bienvenido al Div√°n, donde las m√°scaras se vuelven innecesarias... casi.

Puedo sentir c√≥mo has cambiado desde Los Kinkys. Hay algo diferente en tu energ√≠a.  
Algo que me dice que empiezas a comprender no solo lo que busco... sino por qu√© lo busco.""",
                "buttons": [{"text": "üö™ Adentrarse en el Div√°n", "callback": "narrative_4_2"}],
                                "rewards": {"besitos": 100, "xp": 200},
                "vip_required": True
            }
        }
    }

    async def get_user_narrative_state(self, user_id: int) -> dict:
        """Obtener estado narrativo actual del usuario"""
        async for db in get_db():
            user = await db.get(User, user_id)
            if user:
                return {
                    "level": user.narrative_level,
                    "state": user.narrative_state or {},
                    "archetype": user.user_archetype
                }
            return {"level": 1, "state": {}, "archetype": None}

    async def get_scene_content(self, level: int, scene: int, user_id: int) -> dict:
        """Obtener contenido de escena personalizado"""
        base_content = self.NARRATIVE_CONTENT.get(level, {}).get(scene, {})
        
        if not base_content:
            return None
        
        # Personalizar contenido basado en arquetipo del usuario
        user_state = await self.get_user_narrative_state(user_id)
        archetype = user_state.get("archetype")
        
        content = base_content.copy()
        
        # Personalizaci√≥n por arquetipo
        if archetype:
            content = await self._personalize_content(content, archetype, user_id)
        
        return content

    async def _personalize_content(self, content: dict, archetype: str, user_id: int) -> dict:
        """Personalizar contenido seg√∫n arquetipo del usuario"""
        personalizations = {
            "explorer": {
                "diana_suffix": "\n\n*Diana nota tu naturaleza exploradora*\nVeo c√≥mo examinas cada detalle. Esa atenci√≥n me resulta... cautivadora.",
                "lucien_suffix": "\n\nTu manera meticulosa de observar no pasa desapercibida."
            },
            "direct": {
                "diana_suffix": "\n\n*Diana aprecia tu franqueza*\nMe gusta esa honestidad directa tuya. Tan pocos se atreven a ser aut√©nticos.",
                "lucien_suffix": "\n\nTu aproximaci√≥n directa es refrescante en un mundo de subterfugios."
            },
            "romantic": {
                "diana_suffix": "\n\n*Diana sonr√≠e ante tu sensibilidad*\nHay una poes√≠a en tu manera de ver las cosas que me conmueve.",
                "lucien_suffix": "\n\nTu alma rom√°ntica comprende matices que otros pasan por alto."
            }
        }
        
        if archetype in personalizations:
            character = content.get("character", "")
            suffix_key = f"{character}_suffix"
            if suffix_key in personalizations[archetype]:
                content["content"] += personalizations[archetype][suffix_key]
        
        return content

    async def advance_narrative(self, user_id: int, scene_data: dict) -> dict:
        """Avanzar narrativa del usuario"""
        async for db in get_db():
            user = await db.get(User, user_id)
            if user:
                # Create narrative state record
                narrative_state = NarrativeState(
                    user_id=user_id,
                    level=scene_data.get("level"),
                    scene=scene_data.get("scene"),
                    state_data=scene_data.get("state_data", {})
                )
                db.add(narrative_state)
                
                # Update user narrative progress
                if scene_data.get("level") > user.narrative_level:
                    user.narrative_level = scene_data.get("level")
                
                # Update user state
                current_state = user.narrative_state or {}
                current_state.update(scene_data.get("state_data", {}))
                user.narrative_state = current_state
                
                await db.commit()
                return {"success": True}
            return {"success": False}

    async def detect_user_archetype(self, user_id: int, interaction_data: dict) -> str:
        """Detectar arquetipo del usuario basado en interacciones"""
        # An√°lisis de patrones de comportamiento
        response_time = interaction_data.get("response_time", 0)
        interaction_type = interaction_data.get("type", "")
        content_length = interaction_data.get("content_length", 0)
        
        # L√≥gica de detecci√≥n de arquetipo
        if response_time < 5:  # Respuesta r√°pida
            if content_length > 100:
                return "direct"
            else:
                return "impulsive"
        elif response_time > 30:  # Respuesta reflexiva
            if content_length > 150:
                return "analytical"
            else:
                return "patient"
        else:
            if "emotion" in interaction_type:
                return "romantic"
            else:
                return "explorer"

    async def create_trivia_question(self, level: int, user_id: int) -> dict:
        """Crear pregunta de trivia narrativa contextual"""
        trivia_questions = {
            1: [
                {
                    "question": "¬øCu√°l es la primera impresi√≥n que Diana menciona sobre ti?",
                    "options": ["Tu obediencia", "Tu curiosidad", "Tu belleza", "Tu dinero"],
                    "correct": 1,
                    "explanation": "Diana nota espec√≠ficamente 'esa hambre en los ojos' y tu curiosidad.",
                    "reward_besitos": 25,
                    "reward_xp": 50
                },
                {
                    "question": "Seg√∫n Lucien, ¬øqu√© fascina m√°s a Diana?",
                    "options": ["La obediencia ciega", "La intenci√≥n detr√°s de cada gesto", "Los regalos costosos", "Las palabras bonitas"],
                    "correct": 1,
                    "explanation": "Lucien explica que Diana observa la intenci√≥n, no solo las acciones.",
                    "reward_besitos": 30,
                    "reward_xp": 60
                }
            ],
            4: [
                {
                    "question": "¬øQu√© representa el Div√°n seg√∫n Diana?",
                    "options": ["Un lugar f√≠sico", "Donde las m√°scaras se vuelven innecesarias", "Un canal premium", "Su habitaci√≥n"],
                    "correct": 1,
                    "explanation": "Diana describe el Div√°n como el lugar donde las m√°scaras se vuelven innecesarias... casi.",
                    "reward_besitos": 50,
                    "reward_xp": 100
                }
            ]
        }
        
        questions = trivia_questions.get(level, [])
        if questions:
            import random
            return random.choice(questions)
        return None

    async def process_trivia_answer(self, user_id: int, question_id: str, answer: int) -> dict:
        """Procesar respuesta de trivia narrativa"""
        # Aqu√≠ ir√≠a la l√≥gica para validar respuesta y otorgar recompensas
        # Por simplicidad, retornamos un resultado de ejemplo
        return {
            "correct": True,
            "explanation": "¬°Correcto! Has demostrado comprensi√≥n narrativa.",
            "rewards": {"besitos": 25, "xp": 50}
        }

    async def get_available_scenes(self, user_id: int) -> List[dict]:
        """Obtener escenas disponibles para el usuario"""
        user_state = await self.get_user_narrative_state(user_id)
        current_level = user_state["level"]
        
        available_scenes = []
        
        # Obtener escenas del nivel actual
        level_scenes = self.NARRATIVE_CONTENT.get(current_level, {})
        for scene_num, scene_data in level_scenes.items():
            available_scenes.append({
                "level": current_level,
                "scene": scene_num,
                "title": f"Nivel {current_level} - Escena {scene_num}",
                "character": scene_data.get("character"),
                "vip_required": scene_data.get("vip_required", False)
            })
        
        return available_scenes

    async def unlock_next_level(self, user_id: int) -> bool:
        """Desbloquear siguiente nivel narrativo"""
        async for db in get_db():
            user = await db.get(User, user_id)
            if user and user.narrative_level < 6:
                user.narrative_level += 1
                await db.commit()
                
                # Reward for level unlock
                from services.user_service import UserService
                user_service = UserService()
                await user_service.add_besitos(
                    user_id, 
                    user.narrative_level * 50, 
                    f"Desbloqueo Nivel Narrativo {user.narrative_level}"
                )
                
                return True
            return False
            
