from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler
from services.user_service import UserService
from utils.lucien_voice import LucienVoice
from typing import Dict, Any


class CommandHandlers:
    """Comandos principales del bot"""

    def __init__(self):
        self.user_service = UserService()
        self.lucien = LucienVoice()

    async def help_command(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        """Comando /help elegante"""

        help_message = f"""
{self.lucien.EMOJIS['lucien']} **Gu√≠a de Interacci√≥n**

*[Con profesionalidad]*

Estos son los comandos principales para interactuar conmigo:

**üé≠ Comandos B√°sicos:**
/start - Iniciar o regresar al men√∫ principal
/profile - Ver tu evaluaci√≥n personal
/mission - Tus misiones activas
/games - Juegos de personalidad
/help - Esta gu√≠a

**üíé Comandos Avanzados:**
/shop - Tienda exclusiva de Diana
/auction - Subastas de contenido premium
/stats - Estad√≠sticas detalladas

{self.lucien.EMOJIS['diana']} *[Diana desde las sombras]*

"*La verdadera interacci√≥n sucede a trav√©s de los botones, {update.effective_user.first_name}. √ösalos.*"

*[Con elegancia]*

Lucien siempre est√° aqu√≠ para guiarte en tu camino hacia... conocer mejor a Diana.
        """.strip()

        keyboard = [
            [InlineKeyboardButton("üé≠ Men√∫ Principal", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            help_message, reply_markup=reply_markup, parse_mode="Markdown"
        )

    async def profile_command(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        """Comando /profile directo"""

        user_data = {
            "telegram_id": update.effective_user.id,
            "username": update.effective_user.username,
            "first_name": update.effective_user.first_name,
            "last_name": update.effective_user.last_name,
        }

        user = self.user_service.get_or_create_user(user_data)
        narrative_state = self.user_service.get_or_create_narrative_state(user["id"])
        user_stats = self.user_service.get_user_detailed_stats(user["id"])

        quick_profile = f"""
{self.lucien.EMOJIS['lucien']} **Evaluaci√≥n R√°pida**

*[Consultando registros]*

{user['first_name']}, aqu√≠ tienes un resumen de tu progreso:

üìä **Estado Actual:**
‚Ä¢ Nivel: {user_stats['level']} ‚≠ê
‚Ä¢ Besitos: {user_stats['besitos']:,} üíã  
‚Ä¢ Confianza de Diana: {narrative_state.diana_trust_level}/100

üé≠ **Progreso Narrativo:**
{narrative_state.current_level.value}

*[Con an√°lisis]*

Diana {self._get_diana_opinion(narrative_state.diana_trust_level)}
        """.strip()

        keyboard = [
            [InlineKeyboardButton("üìä Ver perfil completo", callback_data="profile")],
            [InlineKeyboardButton("üéØ Pr√≥ximas misiones", callback_data="mission")],
            [InlineKeyboardButton("üé≠ Men√∫ principal", callback_data="main_menu")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            quick_profile, reply_markup=reply_markup, parse_mode="Markdown"
        )

    def _get_diana_opinion(self, trust_level: int) -> str:
        """Opini√≥n de Diana seg√∫n nivel de confianza"""

        if trust_level >= 90:
            return "est√° profundamente fascinada contigo."
        elif trust_level >= 70:
            return "ha notado tu dedicaci√≥n especial."
        elif trust_level >= 50:
            return "est√° comenzando a interesarse."
        elif trust_level >= 30:
            return "observa tus acciones con curiosidad."
        else:
            return "a√∫n est√° evaluando tu potencial."


# Crear handlers
command_handlers = [
    CommandHandler("help", CommandHandlers().help_command),
    CommandHandler("profile", CommandHandlers().profile_command),
    # Agregar m√°s comandos seg√∫n necesidad
]
   