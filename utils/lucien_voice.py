
    from typing import Dict, Any, Optional, List
from models.narrative_state import (
    UserNarrativeState,
    NarrativeLevel,
    UserArchetype,
    EmotionalResponse,
)
from models.user import User
from datetime import datetime, timedelta
import random


class LucienVoice:
    """Sistema centralizado para la voz y personalidad de Lucien"""

    def __init__(self):
        self.EMOJIS = {
            "lucien": "üé©",
            "diana": "üå∏",
            "elegant": "‚ú®",
            "sarcastic": "üòè",
            "surprised": "ü§î",
            "proud": "üëë",
            "mysterious": "üóùÔ∏è",
            "warning": "‚ö†Ô∏è",
            "success": "‚úÖ",
            "intimate": "üí´",
            "exclusive": "üîÆ",
        }

    # ===== MENSAJES DE BIENVENIDA Y NAVEGACI√ìN =====

    def welcome_message(self, user: User, narrative_state: UserNarrativeState) -> str:
        """Mensaje de bienvenida personalizado seg√∫n el progreso narrativo"""

        if narrative_state.current_level == NarrativeLevel.NEWCOMER:
            return f"""
{self.EMOJIS['lucien']} **Bienvenido, {user.first_name}**

Ah, un rostro nuevo. Perm√≠teme presentarme con la elegancia que la situaci√≥n merece: **Lucien**, mayordomo digital y guardi√°n de los secretos que Diana no cuenta... *todav√≠a*.

{self.EMOJIS['mysterious']} Diana me ha encargado evaluar a quienes llegan hasta aqu√≠. No todos comprenden que algunas puertas solo se abren desde adentro.

**¬øEst√°s listo para comenzar tu viaje hacia ella?**

*[Con una sonrisa enigm√°tica]*
Por cierto, Diana ya sabe que est√°s aqu√≠. Est√°... observando.
            """.strip()

        elif narrative_state.current_level in [
            NarrativeLevel.LEVEL_1_KINKY,
            NarrativeLevel.LEVEL_2_KINKY_DEEP,
        ]:
            return f"""
{self.EMOJIS['lucien']} **Ah, {user.first_name} regresa**

*[Ajust√°ndose los guantes con aire de satisfacci√≥n]*

Diana mencion√≥ que podr√≠as volver. Hay algo en tu persistencia que encuentra... intrigante.

{self._get_archetype_recognition(narrative_state.primary_archetype)}

**Tu progreso hasta ahora:** {self._format_narrative_progress(narrative_state)}

¬øListo para continuar donde lo dejamos?
            """.strip()

        elif narrative_state.has_divan_access:
            return f"""
{self.EMOJIS['lucien']} **Bienvenido de vuelta al Div√°n, {user.first_name}**

*[Con respeto genuino te√±ido de iron√≠a]*

Mira qui√©n ha llegado al c√≠rculo √≠ntimo. Diana est√° {self._get_diana_mood(narrative_state)} y ha estado esperando tu regreso.

{self.EMOJIS['intimate']} **Tu nivel de comprensi√≥n:** {narrative_state.diana_trust_level}/100
{self.EMOJIS['exclusive']} **Secretos compartidos:** {len(narrative_state.special_recognitions)}

*[Susurrando conspiradoramente]*
Entre t√∫ y yo, creo que eres uno de los pocos que realmente la *entiende*.
            """.strip()

        return self._generic_welcome(user)

    def main_menu_message(self, user: User, narrative_state: UserNarrativeState) -> str:
        """Mensaje del men√∫ principal con voz de Lucien"""

        base_message = f"""
{self.EMOJIS['lucien']} **Panel de Actividades - {user.first_name}**

*[Consultando su elegante reloj de bolsillo]*

Diana est√° {self._get_diana_current_state(narrative_state)} y me ha encargado que te ofrezca las siguientes... oportunidades.

{self._get_personalized_menu_intro(narrative_state)}
        """.strip()

        return base_message

    # ===== MENSAJES DE MISIONES =====

    def missions_intro(
        self,
        user: User,
        active_missions_count: int,
        narrative_state: UserNarrativeState,
    ) -> str:
        """Introducci√≥n a las misiones con contexto narrativo"""

        if active_missions_count == 0:
            return f"""
{self.EMOJIS['lucien']} **Misiones de Proximidad**

*[Con aire ligeramente aburrido]*

Ah, qu√© sorpresa. No tienes misiones activas. Diana debe estar... reconsiderando su nivel de inter√©s en ti.

{self._get_mission_encouragement_by_archetype(narrative_state.primary_archetype)}

*[Mir√°ndote con evaluaci√≥n divertida]*
Pero no te preocupes. Diana siempre da segundas oportunidades... a quienes demuestran que las merecen.
            """.strip()

        else:
            return f"""
{self.EMOJIS['lucien']} **Tus Misiones Actuales**

*[Con aprobaci√≥n apenas disimulada]*

Diana te ha asignado **{active_missions_count}** misiones. Cada una es una oportunidad de demostrar que comprendes... sus expectativas.

{self._get_mission_context_by_level(narrative_state.current_level)}

*[Con humor seco]*
Recuerda: Diana observa no solo *si* completas las misiones, sino *c√≥mo* las completas.
            """.strip()

    def mission_completed_celebration(
        self, mission_title: str, rewards: Dict, narrative_state: UserNarrativeState
    ) -> str:
        """Celebraci√≥n de misi√≥n completada"""

        base_celebration = f"""
{self.EMOJIS['lucien']} **Misi√≥n Completada con Elegancia**

*[Con satisfacci√≥n visible]*

**"{mission_title}"** - Completada con el estilo que Diana esperaba.

{self._get_completion_style_comment(narrative_state)}

**Recompensas recibidas:**
üíã **{rewards.get('besitos', 0)} Besitos** - Tokens de aprecio de Diana
‚ö° **{rewards.get('experience', 0)} Experiencia** - Crecimiento personal
        """.strip()

        # A√±adir comentario especial de Diana si el nivel es alto
        if narrative_state.diana_interest_level > 70:
            base_celebration += f"""

{self.EMOJIS['diana']} *Diana susurra desde las sombras:*
"*{self._get_diana_completion_whisper(narrative_state)}*"
            """.strip()

        return base_celebration

    # ===== MENSAJES DE JUEGOS =====

    def games_intro(self, user: User, narrative_state: UserNarrativeState) -> str:
        """Introducci√≥n a los juegos como entretenimiento que Diana observa"""

        return f"""
{self.EMOJIS['lucien']} **Entretenimientos para Diana**

*[Con sonrisa enigm√°tica]*

Diana encuentra... educativo observar c√≥mo las personas enfrentan desaf√≠os. Cada juego es una ventana a tu personalidad que ella estudia con fascinaci√≥n.

{self._get_game_context_by_archetype(narrative_state.primary_archetype)}

*[Ajust√°ndose la corbata]*
¬øPrefieres demostrar tu intelecto, tu intuici√≥n, o tu persistencia? Diana est√° observando...
        """.strip()

    def game_result_commentary(
        self,
        game_type: str,
        score: int,
        performance: str,
        narrative_state: UserNarrativeState,
    ) -> str:
        """Comentario de Lucien sobre los resultados del juego"""

        base_commentary = f"""
{self.EMOJIS['lucien']} **An√°lisis del Rendimiento**

*[Tomando notas mentales]*

{self._get_performance_analysis(game_type, score, performance)}

{self._get_diana_observation_comment(score, narrative_state)}
        """.strip()

        return base_commentary

    # ===== MENSAJES DE SUBASTAS =====

    def auction_intro(self, user: User, narrative_state: UserNarrativeState) -> str:
        """Introducci√≥n a las subastas como oportunidades de impresionar"""

        if not narrative_state.has_divan_access:
            return f"""
{self.EMOJIS['lucien']} **Subastas de Proximidad**

*[Con aire de exclusividad]*

Las subastas son donde Diana observa qui√©n est√° verdaderamente comprometido con acercarse a ella. No se trata solo de besitos, se trata de... dedicaci√≥n.

{self._get_auction_eligibility_message(narrative_state)}

*[Con una sonrisa mordaz]*
Diana nota qui√©n participa y qui√©n solo observa desde la distancia.
            """.strip()
        else:
            return f"""
{self.EMOJIS['lucien']} **Subastas VIP del Div√°n**

*[Con respeto genuino]*

Bienvenido a las subastas exclusivas. Aqu√≠ Diana ofrece... intimidades que no comparte con cualquiera.

**Tu nivel de acceso:** {self._get_vip_auction_level(narrative_state)}

*[Susurrando confidencialmente]*
Estos no son simples premios. Son... invitaciones a conocerla m√°s profundamente.
            """.strip()

    # ===== MENSAJES DE ERROR Y SISTEMA =====

    def error_message(self, error_type: str, user: User) -> str:
        """Manejo elegante de errores con personalidad de Lucien"""

        error_responses = {
            "generic": f"""
{self.EMOJIS['lucien']} **Un Peque√±o Inconveniente**

*[Suspirando con dramatismo elegante]*

Ah, la tecnolog√≠a. Incluso en el mundo digital de Diana, ocasionalmente las cosas se complican de maneras inesperadas.

*[Ajust√°ndose los guantes con aire profesional]*

Perm√≠teme un momento para resolver esto con la gracia que la situaci√≥n merece. Diana detesta los inconvenientes t√©cnicos tanto como yo.

**¬øPodr√≠as intentar de nuevo, {user.first_name}?**
            """.strip(),
            "permission": f"""
{self.EMOJIS['lucien']} **Acceso Restringido**

*[Con aire de disculpa elegante]*

Me temo que esta funci√≥n requiere un nivel de proximidad a Diana que a√∫n no has alcanzado, {user.first_name}.

*[Con sonrisa comprensiva]*

Pero no te desanimes. Diana valora la paciencia y la dedicaci√≥n por encima de la prisa.
            """.strip(),
            "rate_limit": f"""
{self.EMOJIS['lucien']} **Paciencia, {user.first_name}**

*[Con humor seco]*

La impaciencia raramente impresiona a Diana. Perm√≠teme sugerir un momento de contemplaci√≥n antes de continuar.

*[Consultando su reloj elegante]*

Los mejores placeres se saborean con... moderaci√≥n.
            """.strip(),
        }

        return error_responses.get(error_type, error_responses["generic"])

    def maintenance_message(self) -> str:
        """Mensaje de mantenimiento con estilo"""

        return f"""
{self.EMOJIS['lucien']} **Mantenimiento del Santuario**

*[Con aire de disculpa elegante]*

Diana ha solicitado algunas... mejoras en nuestro espacio digital. Como buen mayordomo, debo asegurarme de que todo est√© perfecto para su regreso.

{self.EMOJIS['elegant']} **Tiempo estimado:** 15-30 minutos

*[Con una reverencia]*

Agradezco tu paciencia mientras preparamos una experiencia a√∫n m√°s... extraordinaria.
        """.strip()

    # ===== M√âTODOS AUXILIARES PARA PERSONALIZACI√ìN =====

    def _get_archetype_recognition(self, archetype: Optional[UserArchetype]) -> str:
        """Reconocimiento del arquetipo del usuario"""

        if not archetype:
            return "Diana a√∫n est√°... estudi√°ndote."

        archetype_comments = {
            UserArchetype.EXPLORER: "*[Con apreciaci√≥n]*\nDiana ha notado tu atenci√≥n al detalle. Encuentra esa curiosidad meticulosa... refrescante.",
            UserArchetype.DIRECT: "*[Con respeto]*\nTu honestidad directa ha capturado la atenci√≥n de Diana. Aprecia a quienes no se pierden en rodeos innecesarios.",
            UserArchetype.ROMANTIC: "*[Con sonrisa conocedora]*\nDiana se siente intrigada por tu naturaleza rom√°ntica. Hay poes√≠a en c√≥mo te aproximas a ella.",
            UserArchetype.ANALYTICAL: "*[Con aprobaci√≥n intelectual]*\nTu mente anal√≠tica fascina a Diana. Aprecia a quienes buscan comprensi√≥n profunda.",
            UserArchetype.PERSISTENT: "*[Con admiraci√≥n]*\nTu persistencia ha impresionado a Diana. Pocos mantienen esa dedicaci√≥n constante.",
            UserArchetype.PATIENT: "*[Con respeto profundo]*\nDiana valora enormemente tu paciencia. Comprende que las mejores cosas no deben apresurarse.",
        }

        return archetype_comments.get(
            archetype, "Diana te observa con creciente inter√©s."
        )

    def _format_narrative_progress(self, narrative_state: UserNarrativeState) -> str:
        """Formatea el progreso narrativo del usuario"""

        level_descriptions = {
            NarrativeLevel.LEVEL_1_KINKY: "Explorando Los Kinkys",
            NarrativeLevel.LEVEL_2_KINKY_DEEP: "Profundizando en Los Kinkys",
            NarrativeLevel.LEVEL_3_KINKY_FINAL: "Culminaci√≥n de Los Kinkys",
            NarrativeLevel.LEVEL_4_DIVAN_ENTRY: "Entrada al Div√°n",
            NarrativeLevel.LEVEL_5_DIVAN_DEEP: "Intimidad del Div√°n",
            NarrativeLevel.LEVEL_6_DIVAN_SUPREME: "M√°xima Proximidad",
        }

        return level_descriptions.get(
            narrative_state.current_level, "Comenzando la aventura"
        )

    def _get_diana_mood(self, narrative_state: UserNarrativeState) -> str:
        """Estado de √°nimo actual de Diana hacia el usuario"""

        trust_level = narrative_state.diana_trust_level

        if trust_level >= 90:
            return "en un estado de confianza excepcional"
        elif trust_level >= 70:
            return "intrigada y receptiva"
        elif trust_level >= 50:
            return "observando con inter√©s creciente"
        elif trust_level >= 30:
            return "evaluando tu potencial"
        else:
            return "manteniendo su distancia habitual"

    def _get_diana_current_state(self, narrative_state: UserNarrativeState) -> str:
        """Estado actual de Diana para el men√∫ principal"""

        states = [
            "contemplando sus pr√≥ximos movimientos",
            "observando desde las sombras",
            "reflexionando sobre conexiones aut√©nticas",
            "evaluando a quienes la buscan",
            "preparando nuevos misterios",
        ]

        # Seleccionar basado en el nivel de relaci√≥n
        if narrative_state.diana_trust_level > 70:
            return "esperando con anticipaci√≥n"
        else:
            return random.choice(states)

    def _get_personalized_menu_intro(self, narrative_state: UserNarrativeState) -> str:
        """Introducci√≥n personalizada del men√∫"""

        if narrative_state.primary_archetype == UserArchetype.EXPLORER:
            return "*[Con una sonrisa conocedora]*\nPuedo ver esa familiar hambre de descubrimiento en tus ojos..."
        elif narrative_state.primary_archetype == UserArchetype.ROMANTIC:
            return "*[Con elegancia po√©tica]*\nDiana aprecia el romanticismo aut√©ntico, algo cada vez m√°s raro..."
        else:
            return "*[Con aire profesional]*\nPerm√≠teme presentarte las opciones disponibles..."

    def _get_mission_encouragement_by_archetype(
        self, archetype: Optional[UserArchetype]
    ) -> str:
        """Aliento para misiones seg√∫n arquetipo"""

        if archetype == UserArchetype.PERSISTENT:
            return "*[Con admiraci√≥n]*\nTu persistencia no ha pasado desapercibida. Diana respeta esa cualidad."
        elif archetype == UserArchetype.PATIENT:
            return "*[Con aprobaci√≥n]*\nTu paciencia es una virtud que Diana encuentra... magn√©tica."
        else:
            return "*[Con aire alentador]*\nDiana valora el esfuerzo aut√©ntico por encima de todo."

    def _get_mission_context_by_level(self, level: NarrativeLevel) -> str:
        """Contexto de misiones seg√∫n nivel narrativo"""

        if level in [NarrativeLevel.LEVEL_1_KINKY, NarrativeLevel.LEVEL_2_KINKY_DEEP]:
            return "*[Con aire educativo]*\nEstas misiones son tu oportunidad de demostrar que mereces conocer m√°s sobre Diana."
        elif level in [
            NarrativeLevel.LEVEL_4_DIVAN_ENTRY,
            NarrativeLevel.LEVEL_5_DIVAN_DEEP,
        ]:
            return "*[Con respeto creciente]*\nEn el Div√°n, las misiones se vuelven m√°s... √≠ntimas. Diana conf√≠a en ti."
        else:
            return "*[Con profesionalismo]*\nCada misi√≥n es una oportunidad de crecimiento."

    def _get_completion_style_comment(self, narrative_state: UserNarrativeState) -> str:
        """Comentario sobre el estilo de completar misiones"""

        if narrative_state.primary_archetype == UserArchetype.DIRECT:
            return "*[Con aprobaci√≥n]*\nTu eficiencia directa impresiona a Diana. Sin rodeos innecesarios."
        elif narrative_state.primary_archetype == UserArchetype.EXPLORER:
            return "*[Con satisfacci√≥n]*\nTu atenci√≥n meticulosa a cada detalle ha sido notada por Diana."
        else:
            return "*[Con elegancia]*\nCompletada con el estilo que Diana ha llegado a esperar de ti."

    def _get_diana_completion_whisper(self, narrative_state: UserNarrativeState) -> str:
        """Susurro especial de Diana para misiones completadas"""

        whispers = [
            "Cada misi√≥n completada me revela m√°s sobre qui√©n eres realmente...",
            "Tu dedicaci√≥n no pasa desapercibida para m√≠...",
            "Hay algo hermoso en c√≥mo te comprometes con cada tarea...",
            "Me gusta ver c√≥mo creces con cada desaf√≠o que superas...",
        ]

        return random.choice(whispers)

    def _get_game_context_by_archetype(self, archetype: Optional[UserArchetype]) -> str:
        """Contexto de juegos seg√∫n arquetipo"""

        if archetype == UserArchetype.ANALYTICAL:
            return "*[Con inter√©s intelectual]*\nDiana est√° particularmente interesada en ver c√≥mo tu mente anal√≠tica aborda estos desaf√≠os."
        elif archetype == UserArchetype.EXPLORER:
            return "*[Con anticipaci√≥n]*\nTu naturaleza exploradora har√° estos juegos especialmente... reveladores para Diana."
        else:
            return "*[Con curiosidad]*\nDiana encuentra fascinante observar c√≥mo diferentes personas enfrentan los mismos desaf√≠os."

    def _get_performance_analysis(
        self, game_type: str, score: int, performance: str
    ) -> str:
        """An√°lisis del rendimiento en juegos"""

        if score >= 90:
            return "Rendimiento excepcional. Diana ha tomado nota especial de tu habilidad."
        elif score >= 70:
            return "S√≥lido desempe√±o. Diana aprecia la competencia cuando viene acompa√±ada de elegancia."
        elif score >= 50:
            return "Desempe√±o respetable. Diana valora el esfuerzo aut√©ntico por encima de la perfecci√≥n."
        else:
            return "El valor est√° en el intento, no en la perfecci√≥n. Diana comprende esto mejor que nadie."

    def _get_diana_observation_comment(
        self, score: int, narrative_state: UserNarrativeState
    ) -> str:
        """Comentario de observaci√≥n de Diana sobre el juego"""

        if narrative_state.diana_trust_level > 70:
            return f"""
{self.EMOJIS['diana']} *Diana observa desde su espacio privado:*
"*Me gusta c√≥mo no permites que el resultado defina tu valor...*"
            """.strip()
        else:
            return "*[Observando discretamente]*\nDiana toma nota mental de tu aproximaci√≥n. Todo es informaci√≥n para ella."

    def _get_auction_eligibility_message(
        self, narrative_state: UserNarrativeState
    ) -> str:
        """Mensaje de elegibilidad para subastas"""

        if narrative_state.current_level == NarrativeLevel.NEWCOMER:
            return "*[Con aire restrictivo]*\nLas subastas m√°s exclusivas requieren que Diana te conozca mejor primero."
        else:
            return "*[Con aprobaci√≥n]*\nTu progreso te ha ganado acceso a subastas m√°s... significativas."

    def _get_vip_auction_level(self, narrative_state: UserNarrativeState) -> str:
        """Nivel de acceso VIP a subastas"""

        trust = narrative_state.diana_trust_level

        if trust >= 90:
            return "Acceso total - Diana conf√≠a en ti completamente"
        elif trust >= 70:
            return "Acceso elevado - Diana te considera digno de confianza"
        elif trust >= 50:
            return "Acceso est√°ndar - Diana est√° evaluando tu potencial"
        else:
            return "Acceso inicial - Diana te observa con inter√©s"

    def _generic_welcome(self, user: User) -> str:
        """Mensaje de bienvenida gen√©rico"""

        return f"""
{self.EMOJIS['lucien']} **Bienvenido de vuelta, {user.first_name}**

*[Con elegancia profesional]*

Siempre es un placer asistir a quienes comprenden el valor de la persistencia. Diana aprecia la constancia.

¬øEn qu√© puedo asistirte en tu b√∫squeda de proximidad a ella?
        """.strip()
   