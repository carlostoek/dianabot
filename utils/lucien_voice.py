
from typing import Dict, Any, Optional, List
from enum import Enum
from datetime import datetime, timedelta
import random
import logging

logger = logging.getLogger(__name__)

class UserArchetype(Enum):
    EXPLORER = "explorer"      # Busca cada detalle
    DIRECT = "direct"          # Va al grano
    ROMANTIC = "romantic"      # Respuestas po√©ticas
    ANALYTICAL = "analytical"  # Busca comprensi√≥n intelectual
    PERSISTENT = "persistent"  # No se rinde f√°cilmente
    PATIENT = "patient"        # Toma tiempo para procesar
    UNDEFINED = "undefined"    # A√∫n no determinado

class InteractionPattern(Enum):
    IMMEDIATE = "immediate"           # Respuesta inmediata
    THOUGHTFUL = "thoughtful"         # Toma tiempo para responder
    RETURNING_QUICK = "returning_quick"  # Regresa r√°pido
    RETURNING_SLOW = "returning_slow"   # Regresa despu√©s de d√≠as
    FIRST_TIME = "first_time"         # Primera interacci√≥n

class LucienVoiceEnhanced:
    """Sistema de narrativa inmersiva con personalidad sarc√°stica y elegante"""

    def __init__(self):
        self.EMOJIS = {
            "lucien": "üçø",
            "diana": "üå∏",
            "elegant": "‚ú®",
            "sarcastic": "üòù",
            "surprised": "ü§î",
            "proud": "üëë",
            "mysterious": "üîë",
            "warning": "‚ö†Ô∏è",
            "success": "‚úÖ",
            "intimate": "üí´",
            "exclusive": "üîÆ",
        }

    # === NIVEL 1 - ESCENA 1: BIENVENIDA DE DIANA ===

    def get_diana_level1_scene1_welcome(self, first_name: str, interaction_pattern: InteractionPattern, archetype: UserArchetype = UserArchetype.UNDEFINED) -> str:
        """Escena 1 - Bienvenida de Diana adaptada seg√∫n comportamiento del usuario"""
        
        # Mensaje base de Diana
        base_message = f"""
{self.EMOJIS['diana']} *[Voz susurrante, como quien comparte un secreto]*

Bienvenido a Los Kinkys, {first_name}.

Has cruzado una l√≠nea que muchos ven... pero pocos realmente atraviesan.

Puedo sentir tu curiosidad desde aqu√≠. Es... intrigante.  
No todos llegan con esa misma hambre en los ojos."""

        # Adaptaci√≥n seg√∫n patr√≥n de interacci√≥n
        if interaction_pattern == InteractionPattern.IMMEDIATE:
            behavioral_note = f"""
*[Notando tu llegada inmediata]*

Veo que no perdiste tiempo en llegar hasta m√≠. Hay algo... urgente en tu energ√≠a que me resulta fascinante."""

        elif interaction_pattern == InteractionPattern.THOUGHTFUL:
            behavioral_note = f"""
*[Observando tu aproximaci√≥n cuidadosa]*

Te tomaste tu tiempo para llegar aqu√≠. Hay sabidur√≠a en esa pausa... como si supieras que algunos encuentros requieren preparaci√≥n mental."""

        elif interaction_pattern == InteractionPattern.RETURNING_QUICK:
            behavioral_note = f"""
*[Con sorpresa genuina]*

Oh... regresaste tan pronto. Hay algo en esa persistencia inmediata que me dice que algo en ti reconoce algo en m√≠."""

        elif interaction_pattern == InteractionPattern.RETURNING_SLOW:
            behavioral_note = f"""
*[Con una sonrisa conocedora]*

Volviste... despu√©s de procesar, despu√©s de reflexionar. Me pregunto qu√© conclusiones sacaste en el tiempo que estuviste lejos."""

        else:  # FIRST_TIME
            behavioral_note = f"""
*[Evaluando con intensidad]*

Este lugar responde a quienes saben que algunas puertas solo se abren desde adentro."""

        # Continuaci√≥n del mensaje
        conclusion = f"""
Y yo... bueno, yo solo me revelo ante quienes comprenden que lo m√°s valioso nunca se entrega f√°cilmente.

*[Pausa, como si estuviera evaluando al usuario]*

Algo me dice que t√∫ podr√≠as ser diferente.  
Pero eso... eso est√° por verse.

{self.EMOJIS['lucien']} *[Lucien aparece con elegancia]*

"*Oh, {first_name}... otro alma perdida que cree que puede entender a Diana. Qu√©... predecible.*"

*[Con sarcasmo elegante]*

"*Pero bueno, Diana insiste en darle una oportunidad a cada... esperanzado.*"
"""

        return f"{base_message}\n\n{behavioral_note}\n\n{conclusion}".strip()

    def get_lucien_level1_scene2_intro(self, first_name: str, user_archetype: UserArchetype = UserArchetype.UNDEFINED) -> str:
        """Escena 2 - Lucien presenta el primer desaf√≠o"""
        
        base_message = f"""
{self.EMOJIS['lucien']} *[Con aire de superioridad elegante]*

Ah, otro visitante de Diana... {first_name}.  
Perm√≠teme presentarme: Lucien, guardi√°n de los secretos que ella no cuenta... todav√≠a.

*[Observando con aire anal√≠tico]*

Veo que Diana ya plant√≥ esa semilla de curiosidad en ti. Lo noto en c√≥mo llegaste hasta aqu√≠.  
Pero la curiosidad sin acci√≥n es solo... voyeurismo pasivo."""

        # Adaptaci√≥n seg√∫n arquetipo (si ya se detect√≥)
        if user_archetype == UserArchetype.EXPLORER:
            archetype_note = f"""
*[Con inter√©s genuino]*

Noto que examinas cada detalle... Interesante. Diana aprecia a quienes ven m√°s all√° de lo obvio."""

        elif user_archetype == UserArchetype.DIRECT:
            archetype_note = f"""
*[Con aprobaci√≥n reluctante]*

Sin rodeos, directo al grano. Diana encuentra refrescante esa honestidad sin filtros."""

        elif user_archetype == UserArchetype.ROMANTIC:
            archetype_note = f"""
*[Con una sonrisa barely perceptible]*

Hay una poes√≠a en c√≥mo te aproximas a esto. Diana tiene debilidad por las almas... art√≠sticas."""

        else:
            archetype_note = f"""
*[Con evaluaci√≥n continua]*

A√∫n estoy... catalog√°ndote. Diana observa. Siempre observa."""

        conclusion = f"""
Y lo que m√°s le fascina no es la obediencia ciega, sino la *intenci√≥n* detr√°s de cada gesto.

*[Con desaf√≠o sutil]*

**Tu primera prueba es simple:** Reacciona al √∫ltimo mensaje del canal.  
Pero hazlo porque realmente quieres entender, no porque se te ordena.

*[Con aire conspiratorio]*

Diana sabr√° la diferencia. Siempre sabe."""

        return f"{base_message}\n\n{archetype_note}\n\n{conclusion}".strip()

    def get_diana_reaction_response(self, reaction_time: str, first_name: str) -> Dict[str, str]:
        """Respuestas de Diana seg√∫n el tiempo de reacci√≥n del usuario"""
        
        if reaction_time == "immediate":
            return {
                "diana_message": f"""
{self.EMOJIS['diana']} *[Con una sonrisa apenas perceptible]*

{first_name}... reaccionaste sin dudar.

*[Con aprobaci√≥n sutil]*

Hay algo hermoso en esa espontaneidad. No todos tienen el coraje de actuar cuando sienten que algo es correcto.

*[Acerc√°ndose ligeramente]*

Impulsivo... pero no imprudente. Hay una diferencia que pocos entienden.  
Me gusta eso de ti.""",
                
                "lucien_comment": f"""
{self.EMOJIS['lucien']} *[Con sorpresa fingida]*

"*Bueno, bueno... parece que {first_name} no es completamente... in√∫til.*"

*[Con eficiencia profesional]*

"*Tu Mochila del Viajero est√° lista. Diana eligi√≥ algo espec√≠fico para alguien como t√∫: alguien que act√∫a when it feels right.*"
""",
                "reward_type": "immediate_action_reward"
            }
        
        elif reaction_time == "thoughtful":
            return {
                "diana_message": f"""
{self.EMOJIS['diana']} *[Con mirada pensativa]*

{first_name}... te tomaste tu tiempo.

*[Con apreciaci√≥n profunda]*

Observaste, evaluaste, consideraste. Hay sabidur√≠a en esa paciencia que encuentro... seductora.

*[Con intensidad creciente]*

Me fascina c√≥mo algunos saben que lo genuino no debe apresurarse.  
Tu manera de aproximarte dice m√°s de ti que cualquier reacci√≥n impulsiva.""",
                
                "lucien_comment": f"""
{self.EMOJIS['lucien']} *[Con aprobaci√≥n reluctante]*

"*Hmm... {first_name} comprende que las mejores decisiones no se toman a la ligera. Qu√©... raro.*"

*[Con aire m√≠stico]*

"*Tu Mochila del Viajero contiene algo especial, seleccionado para alguien que sabe esperar el momento correcto.*"
""",
                "reward_type": "thoughtful_action_reward"
            }
        
        else:  # no_reaction
            return {
                "diana_message": f"""
{self.EMOJIS['diana']} *[Con decepci√≥n sutil pero comprensiva]*

{first_name}... decidiste no reaccionar.

*[Con aire reflexivo]*

Interesante. A veces la acci√≥n m√°s reveladora es... la inacci√≥n.  
Quiz√°s necesitas m√°s tiempo para decidir si realmente quieres este viaje.

*[Con paciencia enigm√°tica]*

Estar√© aqu√≠ cuando est√©s listo.""",
                
                "lucien_comment": f"""
{self.EMOJIS['lucien']} *[Con sarcasmo palpable]*

"*Ah, qu√© sorpresa... otro que se queda paralizado ante el primer desaf√≠o.*"

*[Con desd√©n elegante]*

"*Diana es paciente, yo... menos. Pero bueno, siempre puedes intentar de nuevo when you grow a spine.*"
""",
                "reward_type": "no_action_consequence"
            }

    # === M√âTODOS DE AN√ÅLISIS DE COMPORTAMIENTO ===

    def analyze_interaction_pattern(self, user_data: Dict) -> InteractionPattern:
        """Analiza el patr√≥n de interacci√≥n del usuario"""
        
        # Esta l√≥gica se basar√≠a en datos reales del usuario
        # Por ahora simulamos con l√≥gica b√°sica
        
        last_activity = user_data.get('last_activity')
        created_today = user_data.get('created_today', True)
        previous_sessions = user_data.get('session_count', 0)
        
        if created_today and previous_sessions == 0:
            return InteractionPattern.FIRST_TIME
        elif previous_sessions > 0:
            # L√≥gica para determinar si regresa r√°pido o lento
            # basada en tiempo desde √∫ltima actividad
            return InteractionPattern.RETURNING_QUICK  # Simplificado
        else:
            return InteractionPattern.IMMEDIATE

    def detect_user_archetype(self, interaction_history: List[Dict]) -> UserArchetype:
        """Detecta el arquetipo del usuario basado en su historial"""
        
        # An√°lisis simplificado - en implementaci√≥n real ser√≠a m√°s sofisticado
        if not interaction_history:
            return UserArchetype.UNDEFINED
            
        # Aqu√≠ ir√≠a l√≥gica de ML o an√°lisis de patrones
        # Por ahora retornamos aleatorio para testing
        return UserArchetype.EXPLORER

    # === M√âTODOS AUXILIARES ===

    def get_reward_content(self, reward_type: str, user_archetype: UserArchetype) -> Dict[str, str]:
        """Genera contenido de recompensa personalizado"""
        
        rewards = {
            "immediate_action_reward": {
                "title": "üéí Mochila del Viajero Impulsivo",
                "description": "Para quienes act√∫an con el coraz√≥n",
                "content": "Primera pista del mapa + Acceso a chat especial",
                "rarity": "Com√∫n pero personalizado"
            },
            "thoughtful_action_reward": {
                "title": "üéí Mochila del Viajero Reflexivo", 
                "description": "Para quienes piensan antes de actuar",
                "content": "Primera pista del mapa + Acceso a an√°lisis profundo",
                "rarity": "Com√∫n pero personalizado"
            },
            "no_action_consequence": {
                "title": "‚è≥ Oportunidad Perdida",
                "description": "Las dudas tienen consecuencias",
                "content": "Chance de redemption en 24 horas",
                "rarity": "Lesson learned"
            }
        }
        
        return rewards.get(reward_type, rewards["no_action_consequence"])

    # === MENSAJES DE ERROR CON PERSONALIDAD ===

    def get_error_message(self, context: str = "") -> str:
        """Mensaje de error con el tono sarc√°stico de Lucien"""
        
        error_messages = [
            f"{self.EMOJIS['lucien']} *[Con exasperaci√≥n elegante]*\n\n\"*Oh, qu√© sorpresa... algo se rompi√≥. Como si no fuera suficientemente dif√≠cil mantener todo funcionando without your help.*\"\n\n*[Con aire profesional forzado]*\n\n\"*Por favor, intenta con /start de nuevo y... maybe this time be more careful.*\"",
            
            f"{self.EMOJIS['lucien']} *[Suspirando dram√°ticamente]*\n\n\"*Error t√©cnico. Qu√© elegante timing, just when things were getting interesting.*\"\n\n*[Con desd√©n fingido]*\n\n\"*Diana me pide que te asegure que esto se resolver√°. I personally make no such promises.*\"",
        ]
        
        return random.choice(error_messages)

